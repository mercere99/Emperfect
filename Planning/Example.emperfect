/// Some important, built-in variables (see README.md for full list).
///  ${dir} : Directory where all Emperfect files should go.
///     NOTE: This directory will be cleared before each test run, so be careful when setting it.

/// Initialize variable settings (such as those listed above); must come first.
:Init dir=.emperfect

/// Setup how compilation should be performed
/// (Any new :Compile commands below would replace this one for subsequent tests.)
/// The variables below can be used:
///   ${#test} : The number of the test currently being run.
///   ${cpp} : Generated code file for the current test
///   ${exe} : Executable created for the current test
///   ${out} : File to write any generated standard output.
///   ${compile} : File to write any compilation warnings or errors.
/// Any of these variables can also be overridden in the arguments for :Testcase
:Compile
  g++ -std=c++20 -Wall -Wextra ${cpp} -o ${exe} 2> ${compile}

/// Provide a header that should be included at the beginning of all tests.
/// Note: Settings provided here will be available thereafter.
///       After this example :Header, ${test_var} can be used in any test as 2.0.
/// (Any new :Header commands below would replace this one for subsequent tests.)
:Header test_var=2.0
#include <iostream>
#include "../main.cpp"

double SquareRoot(double x) { return x / ${test_var}; }
double Sum(double x, double y) { return x + y; }

/// Set up the output that should be generated.
/// (Multiple :Output commands are cumulative, but only track subsequent tests.)
:Output detail="student"                                       /// No filename -> Standard out
:Output filename="results.html", detail="student"              /// Limited HTML results for students
:Output filename="private/teacher-only.html", detail="teacher" /// Full HTML results for instructors
:Output filename="grade.txt", detail="percent"                 /// Record total grade as % of points

/// All tests to be run.  See README.md for formatting information and options
:TestCase run_main=false, name="Simple Tests", points=10.0  /// A 10-point test case.  All code is used until next : line.
  size_t x = 5;
  size_t y = 8;
  CHECK(x + 2 < y+1, "This is an error message.");

  std::string str = "Test string.";
  std::string error_middle = " multi-segment";
  CHECK(str == "Test string.", "This is an error message for a", error_middle, " string test.");
  CHECK(str == "Test string2.", "This is an error message for a string test that should fail.");
  CHECK(str == ",(", "Test should fail, but , and ( in quotes shouldn't cause parsing problems.");
  CHECK(Sum(1.5,1.5) == 3.0, "Make sure , and ( also work outside of quotes, but in an expression.");

:TestCase run_main=false, name="Hidden Tests", points=40.0, hidden=true
  CHECK(SquareRoot(4.0) == 2.0);
  CHECK(SquareRoot(16.0) == 4.0);
  CHECK(SquareRoot(1000000.0) == 1000.0, "Fails when tested on large values.");
  CHECK(SquareRoot(0.0) == 0.0, "Fails when tested on ZERO.");

:TestCase run_main=false, name="Free Points", points=50.0
  std::cout << "Hello World!" << std::endl;
  CHECK( 2+2 == 4);
  CHECK( true );
  CHECK( "abc" == "abc");

:TestCase run_main=false, name="NOT-Hidden This time", points=5.0
  CHECK(SquareRoot(4.0) == 2.0);
  CHECK(SquareRoot(16.0) == 4.0);
  CHECK(SquareRoot(1000000.0) == 1000.0, "Fails when tested on large values.");
  CHECK(SquareRoot(0.0) == 0.0, "Fails when tested on ZERO.");

:TestCase run_main=true, name="Test with illegal C++ code.", points=10
  CHECK(5==5);
  CHECK(5==std::string("5"));

:TestCase run_main=true, name="Basic IO test", points=10, expect="halfout.txt", match_case=false
  CHECK(Half(4.0)==2.0);
  CHECK(Half(100.0)==50.0);
  CHECK(Half(1.0)==0.5);
  CHECK(Half(2.2222) < 1.11115);
  CHECK(Half(2.2222) > 1.11105);

:TestCase run_main=true, name="Failed IO test due to case-mismatch", points=10, expect="halfout.txt", match_case=true
:TestCase run_main=true, name="Diff test", points=10, expect="diffout.txt", match_case=true


:TestCase name="Test Timeout", timeout=1, points=15
  double x = 1.0;
  for (size_t i = 0; i < 1000000000000; ++i) {
    x *= 1.00001;
  }
  std::cout << x;

:TestCase name="Test Run-time error", timeout=1, points=5
  int x = 1000;
  for (int i = 10; i >= 0; i--) {
    std::cout << (x/i) << std::endl;
  }

:TestCase name="Test type checks", timeout=1, points=5
  int x = 1000;
  std::string y = "Test string";
  double z = 1.0;
  CHECK_TYPE(x, int);
  CHECK_TYPE(y, std::string);
  CHECK_TYPE(y[2], char);
  CHECK_TYPE(z, double);
  CHECK_TYPE(z, char);

:TestCase name="Testing multi-line strings.", timeout=10, points=10
  std::string val1 = "abc\ndef";
  CHECK(val1 == "abc\ndef");

:TestCase name="Testing multi-line strings with failue.", timeout=10, points=10
  std::string val1 = "abc\ndef";
  CHECK(val1 == "abc\ndefg");
  
:TestCase name="Testing escape chars in output.", timeout=10, points=10, expect="halfout.txt"
  std::cout << "HELLO HALF WORLd!\t";

:TestCase name="Fail with error.", points=5
  exit(1);

:TestCase name="Pass with error.", points=5, exit_code=1
  exit(1);

:TestCase name="Fail by failing to error.", points=5, exit_code=1
